name : CICD Pipeline

on:
  push:
    branches:
      - development
      
jobs:
  build:
    runs-on: ubuntu-latest
    # environment: STAGING

    steps: 
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'
      
      - name: Install Dependencies
        run: npm install


      # - name: Initialize Terraform
      #   run: terraform init
        
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: AKIA3FLD5TGMVDZBTLQZ
      #     aws-secret-access-key: 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
      #     aws-region: us-east-1
      #     # role-to-assume: arn:aws:iam::767398091161:user/terraform-github
      #     managed-session-policies: arn:aws:iam::aws:policy/AmazonEC2FullAccess

      - name: Build App
        run: npm run build

      - name: Docker build
        run: docker build -t psoakun/fp-pso .

      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish Image to DockerHub
        run: docker push psoakun/fp-pso:latest
  
      - name: Docker run (for development purpose)
        run: docker run -d -p 3000:3000 psoakun/fp-pso

      # - name: Wait for application to start
      #   run: sleep 10  
  
      # - name: Check if app is running (basic health check)
      #   run: curl -f http://localhost:3000 || exit 1

  # test:
  #   runs-on: ubuntu-latest
  #   environment: STAGING
  #   needs: build  

  #   steps:
  #     - name: Checkout Source
  #       uses: actions/checkout@v4

  #     - name: Set up NodeJS
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.14.0'

  #     - name: Install dependencies
  #       run: npm install

  deploy:
    runs-on: ubuntu-latest
    # environment: STAGING
    needs: build  

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.8.5"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: AKIA3FLD5TGM3YFTURRH
          aws-secret-access-key: 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
          aws-region: ap-southeast-2
          
      - name: Initialize Terraform
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.out

      - name: Terraform Apply
        run: terraform apply plan.out
        env:
          TF_VAR_access_key: AKIA3FLD5TGM3YFTURRH
          TF_VAR_secret_key: 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

      - name: Push Docker Image to EC2 Instance
        shell: /usr/bin/bash -e {0}
        env:
          AWS_REGION: ap-southeast-2
          TF_VAR_access_key: AKIA3FLD5TGM3YFTURRH
          TF_VAR_secret_key: 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
          INSTANCE_IP: ${{ env.INSTANCE_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{ env.INSTANCE_IP }} '
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fp-pso:latest
            sudo docker run -d -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/fp-pso:latest
